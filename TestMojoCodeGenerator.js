// Generated by CoffeeScript 1.10.0
(function() {
		var addslashes, addslashes_single_quotes, TestMojoCodeGenerator;

		(function(root) {
				return root.Mustache = require("mustache.js") || root.Mustache;
		})(this);

		addslashes = function(str) {
			return ("" + str).replace(/[\\"]/g, '\\$&');
		};

		addslashes_single_quotes = function(str) {
			return ("" + str).replace(/[\\']/g, '\\$&');
		};

		TestMojoCodeGenerator = function() {
			this.headers = function(request) {
				var header_name, header_value, headers;
				headers = request.headers;
				return {
					"has_headers": Object.keys(headers).length > 0,
					"header_list": (function() {
						var results;
						results = [];
						for (header_name in headers) {
							header_value = headers[header_name];
							results.push({
									"header_name": addslashes(header_name),
									"header_value": addslashes(header_value)
							});
						}
						return results;
					})()
				};
			};
			this.body = function(request) {
				var has_tabs_or_new_lines, multipart_body, name, raw_body, url_encoded_body, value;
				url_encoded_body = request.urlEncodedBody;
				if (url_encoded_body) {
					return {
						"has_url_encoded_body": true,
						"url_encoded_body": (function() {
							var results;
							results = [];
							for (name in url_encoded_body) {
								value = url_encoded_body[name];
								results.push({
										"name": addslashes(name),
										"value": addslashes(value)
								});
							}
							return results;
						})()
					};
				}
				multipart_body = request.multipartBody;
				if (multipart_body) {
					return {
						"has_multipart_body": true,
						"multipart_body": (function() {
							var results;
							results = [];
							for (name in multipart_body) {
								value = multipart_body[name];
								results.push({
										"name": addslashes(name),
										"value": addslashes(value)
								});
							}
							return results;
						})()
					};
				}
				raw_body = request.body;
				if (raw_body) {
					if (raw_body.length < 5000) {
						has_tabs_or_new_lines = null !== /\r|\n|\t/.exec(raw_body);
						return {
							"has_raw_body_with_tabs_or_new_lines": has_tabs_or_new_lines,
							"has_raw_body_without_tabs_or_new_lines": !has_tabs_or_new_lines,
							"raw_body": has_tabs_or_new_lines ? addslashes_single_quotes(raw_body) : addslashes(raw_body)
						};
					} else {
						return {
							"has_long_body": true
						};
					}
				}
			};
			this.strip_last_backslash = function(string) {
				var i, j, lines, ref;
				lines = string.split("\n");
				for (i = j = ref = lines.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
					lines[i] = lines[i].replace(/\s*\\\s*$/, "");
					if (!lines[i].match(/^\s*$/)) {
						break;
					}
				}
				return lines.join("\n");
			};
			this.json2perl = function(json, ident) {
				if(!ident) ident = "";
				var ret = "";
				if(json instanceof Array) {
					ret = "[\n" + json.map(function(item) {
						return "\t" + ident + this.json2perl(item, ident + "\t");
					}.bind(this)).join(",\n") + "\n" + ident + "]";
				} else if(typeof json === "object") {
					ret = "{\n" + Object.keys(json).map(function(item) {
						return "\t" + ident + item + "\t=> " + this.json2perl(json[item], ident + "\t");
					}.bind(this)).join(",\n") + "\n" + ident + "}";
				} else if(typeof json === "boolean") {
					ret = json ? 1 : 0;
				} else if(json === undefined) {
					ret = "undefined";
				} else if(json === null) {
					ret = "null";
				} else
					ret = "'" + json.toString().replace(/(@$)/g, "\\$1") + "'";

				return ret.toString();
			};
			this.json2pointer = function(json) {
				var hash = this.json2pointerHash(json);
				if(typeof hash != "object")
					return {responseKey: "/", responseValue: hash};
				var pointers = [];
				Object.keys(hash).forEach(function(key) {
					pointers.push({responseKey: key, responseValue: hash[key]})
				});
				return pointers;
			},
			this.json2pointerHash = function(json) {
				var ret = {};
				if(json instanceof Array) {
					ret = json.map(function(item, index) {
						var res = this.json2pointerHash(item);
						if(typeof res === "object") {
							Object.keys(res).forEach(function(key) {
								ret["/" + index + key] = res[key];
							});
						} else {
							ret["/" + index] = res;
						}
					}.bind(this));
				} else if(typeof json === "object") {
					Object.keys(json).forEach(function(item) {
						var res = this.json2pointerHash(json[item]);
						if(typeof res === "object") {
							Object.keys(res).forEach(function(key) {
								ret["/" + item + key] = res[key];
							});
						} else {
							ret["/" + item] = res;
						}
					}.bind(this));
				} else if(typeof json === "boolean") {
					ret = json ? 1 : 0;
				} else
					ret = json;

				return ret;
			};
			this.generate = function(context) {
				var rendered_code, request, template, view;
				request	= context.getCurrentRequest();
				var exchange	= request.getLastExchange();
				view = {
					"testFunc":	request.method.toLowerCase() + "_ok",
					"projName":	context.toString().replace(/.*<Document: (.+?)>/, "$1"),
					"request":	request,
					"headers":	this.headers(request),
					"body":		this.body(request),
					"jsonBody":	this.json2perl(request.jsonBody, "\t"),
					"exchange":	exchange
				};

				if(exchange && exchange.responseBody) {
					if(exchange.responseBody) {
						console.log(exchange.responseBody);
						view.responseJson = JSON.parse(exchange.responseBody);
						console.log(view.responseJson);
						view.testResponse = this.json2pointer(view.responseJson);
						console.log("created view.testResponse: ");
						console.log(JSON.stringify(view.testResponse));
						if(view.testResponse.length > 0) view.hasResponse = true;
					}
				}

				template = readFile("test-mojo.mustache");
				rendered_code = Mustache.render(template, view);
				return rendered_code;
			};
		};

		TestMojoCodeGenerator.identifier = "com.fco.PawExtensions.TestMojoCodeGenerator";

		TestMojoCodeGenerator.title = "Test::Mojo";

		TestMojoCodeGenerator.fileExtension = "t";

		TestMojoCodeGenerator.languageHighlighter = "perl";

		registerCodeGenerator(TestMojoCodeGenerator);

}).call(this);
